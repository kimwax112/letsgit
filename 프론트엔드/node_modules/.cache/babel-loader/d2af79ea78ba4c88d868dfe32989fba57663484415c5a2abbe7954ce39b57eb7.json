{"ast":null,"code":"var _jsxFileName = \"D:\\\\ex2.5\\\\03.14\\\\letsgit\\\\\\uD504\\uB860\\uD2B8\\uC5D4\\uB4DC\\\\src\\\\components\\\\Canvas\\\\Canvas.jsx\",\n  _s = $RefreshSig$();\nimport React, { useRef, useState, useEffect } from 'react';\nimport './Canvas.css'; // 기존 CSS 파일을 불러옵니다\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Canvas = ({\n  backgroundImage,\n  imageSrc\n}) => {\n  _s();\n  const canvasRef = useRef(null);\n  const [isDrawing, setIsDrawing] = useState(false);\n  const [context, setContext] = useState(null);\n  const [color, setColor] = useState('black');\n  const [lineWidth, setLineWidth] = useState(5);\n  const [isErasing, setIsErasing] = useState(false);\n  const [fileName, setFileName] = useState('my_drawing'); // 파일명 입력 상태\n  const [isWhiteBackground, setIsWhiteBackground] = useState(false); // 배경색 설정\n\n  useEffect(() => {\n    const canvas = canvasRef.current;\n    const ctx = canvas.getContext('2d');\n    setContext(ctx);\n    ctx.lineJoin = 'round';\n    ctx.lineCap = 'round';\n    ctx.strokeStyle = color;\n    ctx.lineWidth = lineWidth;\n  }, [color, lineWidth]);\n  ///////////이아래유즈이펙트 수정\n  useEffect(() => {\n    if (backgroundImage && context) {\n      const img = new Image();\n      img.crossOrigin = 'Anonymous';\n      img.src = `http://localhost:8081/files/view/${backgroundImage}`; // 선택된 이미지 URL\n      img.onload = () => {\n        context.clearRect(0, 0, canvasRef.current.width, canvasRef.current.height); // 기존 캔버스 지우기\n        context.drawImage(img, 0, 0, canvasRef.current.width, canvasRef.current.height); // 이미지 배경으로 그리기\n      };\n    }\n  }, [backgroundImage, context]);\n  useEffect(() => {\n    if (imageSrc && context) {\n      const img = new Image();\n      img.crossOrigin = 'Anonymous'; // CORS를 허용하는 설정\n      img.src = imageSrc;\n      img.onload = () => {\n        context.clearRect(0, 0, canvasRef.current.width, canvasRef.current.height); // 이전 그림 지우기\n        context.drawImage(img, 0, 0); // 이미지를 캔버스에 그리기\n      };\n    }\n  }, [imageSrc, context]);\n  const startDrawing = e => {\n    const {\n      left,\n      top\n    } = canvasRef.current.getBoundingClientRect();\n    const offsetX = e.clientX - left; // canvas의 왼쪽 상단으로부터의 X 좌표\n    const offsetY = e.clientY - top; // canvas의 왼쪽 상단으로부터의 Y 좌표\n    context.beginPath();\n    context.moveTo(offsetX, offsetY);\n    setIsDrawing(true);\n  };\n  const draw = e => {\n    if (!isDrawing) return;\n    const {\n      left,\n      top\n    } = canvasRef.current.getBoundingClientRect();\n    const offsetX = e.clientX - left;\n    const offsetY = e.clientY - top;\n    context.lineTo(offsetX, offsetY);\n    context.stroke();\n  };\n  const stopDrawing = () => {\n    context.closePath();\n    setIsDrawing(false);\n  };\n  const changeColor = newColor => {\n    setColor(newColor);\n    if (context) context.strokeStyle = newColor;\n  };\n  const changeLineWidth = newWidth => {\n    setLineWidth(newWidth);\n    if (context) context.lineWidth = newWidth;\n  };\n  const enableDrawing = () => {\n    setIsErasing(false); // 그리기 모드로 설정\n    if (context) {\n      context.globalCompositeOperation = 'source-over'; // 그리기 모드로 설정\n    }\n  };\n  const enableEraser = () => {\n    setIsErasing(true); // 지우기 모드로 설정\n    if (context) {\n      context.globalCompositeOperation = 'destination-out'; // 지우기 모드로 설정\n    }\n  };\n  const clearCanvas = () => {\n    if (!context || !canvasRef.current) return;\n    context.clearRect(0, 0, canvasRef.current.width, canvasRef.current.height);\n  };\n  const saveImage = async () => {\n    if (!canvasRef.current) return;\n    const canvas = canvasRef.current;\n    const tempCanvas = document.createElement('canvas');\n    const tempCtx = tempCanvas.getContext('2d');\n    tempCanvas.width = canvas.width;\n    tempCanvas.height = canvas.height;\n    if (isWhiteBackground) {\n      tempCtx.fillStyle = 'white';\n      tempCtx.fillRect(0, 0, tempCanvas.width, tempCanvas.height);\n    }\n    tempCtx.drawImage(canvas, 0, 0);\n    const dataURL = tempCanvas.toDataURL('image/png');\n    let file = dataURLtoFile(dataURL, 'drawing.png'); // Data URL을 파일로 변환\n    try {\n      const formData = new FormData();\n      formData.append('file', file);\n      await fetch('http://localhost:8081/files/upload', {\n        // 업로드할 서버 API\n        method: 'POST',\n        body: formData\n      });\n      alert(\"이미지가 서버에 저장되었습니다!\");\n    } catch (error) {\n      console.error('이미지 업로드 실패:', error);\n      alert(\"이미지 업로드 실패!\");\n    }\n    const link = document.createElement('a');\n    link.href = dataURL;\n    link.download = `${fileName || 'my_drawing'}.png`;\n    link.click();\n  };\n  const dataURLtoFile = (dataURL, filename) => {\n    let arr = dataURL.split(','),\n      // ',' 기준으로 문자열 분리\n      mime = arr[0].match(/:(.*?);/)[1],\n      // MIME 타입 추출\n      bstr = atob(arr[1]),\n      // Base64 문자열을 디코딩\n      n = bstr.length,\n      u8arr = new Uint8Array(n); // Uint8Array로 변환\n\n    while (n--) {\n      u8arr[n] = bstr.charCodeAt(n);\n    }\n\n    // 반환할 파일 객체 생성\n    return new File([u8arr], filename, {\n      type: mime\n    });\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"canvas-container\",\n    children: [/*#__PURE__*/_jsxDEV(\"canvas\", {\n      ref: canvasRef,\n      width: 1000 // 캔버스의 실제 크기\n      ,\n      height: 500 // 캔버스의 실제 크기\n      ,\n      style: {\n        width: '1000px',\n        height: '500px'\n      } // 화면에 표시되는 크기\n      ,\n      onMouseDown: startDrawing,\n      onMouseMove: draw,\n      onMouseUp: stopDrawing,\n      onMouseOut: stopDrawing\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 156,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"toolbar\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"toolbar-left\",\n        children: [/*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"color\",\n          value: color,\n          onChange: e => changeColor(e.target.value)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 169,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: enableDrawing,\n          disabled: isErasing,\n          children: \"\\u270F\\uFE0F \\uADF8\\uB9AC\\uAE30\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 172,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: enableEraser,\n          disabled: !isErasing,\n          children: \"\\uD83E\\uDDFC \\uC9C0\\uC6B0\\uAC1C\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 173,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: clearCanvas,\n          children: \"\\uD83D\\uDDD1\\uFE0F \\uCD08\\uAE30\\uD654\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 177,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 167,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"toolbar-right\",\n        children: [/*#__PURE__*/_jsxDEV(\"label\", {\n          children: [/*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"checkbox\",\n            checked: isWhiteBackground,\n            onChange: e => setIsWhiteBackground(e.target.checked)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 183,\n            columnNumber: 13\n          }, this), \"\\uBC30\\uACBD\\uC744 \\uD770\\uC0C9\\uC73C\\uB85C \\uC800\\uC7A5\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 182,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"text\",\n          value: fileName,\n          onChange: e => setFileName(e.target.value),\n          placeholder: \"\\uD30C\\uC77C\\uBA85\\uC744 \\uC785\\uB825\\uD558\\uC138\\uC694\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 192,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: saveImage,\n          children: \"\\uC800\\uC7A5\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 200,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 180,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"toolbar-line-width\",\n        children: /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"range\",\n          min: \"1\",\n          max: \"20\",\n          value: lineWidth,\n          onChange: e => changeLineWidth(e.target.value),\n          className: \"vertical-slider\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 205,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 203,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 166,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 155,\n    columnNumber: 5\n  }, this);\n};\n_s(Canvas, \"e+12xKGD4xg693g67w7fFiChw2M=\");\n_c = Canvas;\nexport default Canvas;\nvar _c;\n$RefreshReg$(_c, \"Canvas\");","map":{"version":3,"names":["React","useRef","useState","useEffect","jsxDEV","_jsxDEV","Canvas","backgroundImage","imageSrc","_s","canvasRef","isDrawing","setIsDrawing","context","setContext","color","setColor","lineWidth","setLineWidth","isErasing","setIsErasing","fileName","setFileName","isWhiteBackground","setIsWhiteBackground","canvas","current","ctx","getContext","lineJoin","lineCap","strokeStyle","img","Image","crossOrigin","src","onload","clearRect","width","height","drawImage","startDrawing","e","left","top","getBoundingClientRect","offsetX","clientX","offsetY","clientY","beginPath","moveTo","draw","lineTo","stroke","stopDrawing","closePath","changeColor","newColor","changeLineWidth","newWidth","enableDrawing","globalCompositeOperation","enableEraser","clearCanvas","saveImage","tempCanvas","document","createElement","tempCtx","fillStyle","fillRect","dataURL","toDataURL","file","dataURLtoFile","formData","FormData","append","fetch","method","body","alert","error","console","link","href","download","click","filename","arr","split","mime","match","bstr","atob","n","length","u8arr","Uint8Array","charCodeAt","File","type","className","children","ref","style","onMouseDown","onMouseMove","onMouseUp","onMouseOut","_jsxFileName","lineNumber","columnNumber","value","onChange","target","onClick","disabled","checked","placeholder","min","max","_c","$RefreshReg$"],"sources":["D:/ex2.5/03.14/letsgit/프론트엔드/src/components/Canvas/Canvas.jsx"],"sourcesContent":["import React, { useRef, useState, useEffect } from 'react';\r\nimport './Canvas.css';  // 기존 CSS 파일을 불러옵니다\r\n\r\nconst Canvas = ({ backgroundImage,imageSrc }) => {\r\n  const canvasRef = useRef(null);\r\n  const [isDrawing, setIsDrawing] = useState(false);\r\n  const [context, setContext] = useState(null);\r\n  const [color, setColor] = useState('black');\r\n  const [lineWidth, setLineWidth] = useState(5);\r\n  const [isErasing, setIsErasing] = useState(false);\r\n  const [fileName, setFileName] = useState('my_drawing'); // 파일명 입력 상태\r\n  const [isWhiteBackground, setIsWhiteBackground] = useState(false); // 배경색 설정\r\n\r\n  useEffect(() => {\r\n    const canvas = canvasRef.current;\r\n    const ctx = canvas.getContext('2d');\r\n    setContext(ctx);\r\n    ctx.lineJoin = 'round';\r\n    ctx.lineCap = 'round';\r\n    ctx.strokeStyle = color;\r\n    ctx.lineWidth = lineWidth;\r\n  }, [color, lineWidth]);\r\n  ///////////이아래유즈이펙트 수정\r\n  useEffect(() => {\r\n    if (backgroundImage && context) {\r\n      const img = new Image();\r\n      img.crossOrigin = 'Anonymous';\r\n      img.src = `http://localhost:8081/files/view/${backgroundImage}`; // 선택된 이미지 URL\r\n      img.onload = () => {\r\n        context.clearRect(0, 0, canvasRef.current.width, canvasRef.current.height); // 기존 캔버스 지우기\r\n        context.drawImage(img, 0, 0, canvasRef.current.width, canvasRef.current.height); // 이미지 배경으로 그리기\r\n      };\r\n    }\r\n  }, [backgroundImage, context]);\r\n\r\n  useEffect(() => {\r\n    if (imageSrc && context) {\r\n      const img = new Image();\r\n      img.crossOrigin = 'Anonymous';  // CORS를 허용하는 설정\r\n      img.src = imageSrc;\r\n      img.onload = () => {\r\n        context.clearRect(0, 0, canvasRef.current.width, canvasRef.current.height);  // 이전 그림 지우기\r\n        context.drawImage(img, 0, 0);  // 이미지를 캔버스에 그리기\r\n      };\r\n    }\r\n  }, [imageSrc, context]);\r\n\r\n\r\n  const startDrawing = (e) => {\r\n    const { left, top } = canvasRef.current.getBoundingClientRect();\r\n    const offsetX = e.clientX - left;  // canvas의 왼쪽 상단으로부터의 X 좌표\r\n    const offsetY = e.clientY - top;   // canvas의 왼쪽 상단으로부터의 Y 좌표\r\n    context.beginPath();\r\n    context.moveTo(offsetX, offsetY);\r\n    setIsDrawing(true);\r\n  };\r\n  \r\n  const draw = (e) => {\r\n    if (!isDrawing) return;\r\n    const { left, top } = canvasRef.current.getBoundingClientRect();\r\n    const offsetX = e.clientX - left;\r\n    const offsetY = e.clientY - top;\r\n    context.lineTo(offsetX, offsetY);\r\n    context.stroke();\r\n  };\r\n  \r\n  const stopDrawing = () => {\r\n    context.closePath();\r\n    setIsDrawing(false);\r\n  };\r\n\r\n  const changeColor = (newColor) => {\r\n    setColor(newColor);\r\n    if (context) context.strokeStyle = newColor;\r\n  };\r\n\r\n  const changeLineWidth = (newWidth) => {\r\n    setLineWidth(newWidth);\r\n    if (context) context.lineWidth = newWidth;\r\n  };\r\n\r\n  const enableDrawing = () => {\r\n    setIsErasing(false); // 그리기 모드로 설정\r\n    if (context) {\r\n      context.globalCompositeOperation = 'source-over'; // 그리기 모드로 설정\r\n    }\r\n  };\r\n  \r\n  const enableEraser = () => {\r\n    setIsErasing(true); // 지우기 모드로 설정\r\n    if (context) {\r\n      context.globalCompositeOperation = 'destination-out'; // 지우기 모드로 설정\r\n    }\r\n  };\r\n  \r\n\r\n  const clearCanvas = () => {\r\n    if (!context || !canvasRef.current) return;\r\n    context.clearRect(0, 0, canvasRef.current.width, canvasRef.current.height);\r\n  };\r\n\r\n  const saveImage = async () => {\r\n    if (!canvasRef.current) return;\r\n    \r\n    const canvas = canvasRef.current;\r\n    const tempCanvas = document.createElement('canvas');\r\n    const tempCtx = tempCanvas.getContext('2d');\r\n\r\n    tempCanvas.width = canvas.width;\r\n    tempCanvas.height = canvas.height;\r\n\r\n    if (isWhiteBackground) {\r\n      tempCtx.fillStyle = 'white';\r\n      tempCtx.fillRect(0, 0, tempCanvas.width, tempCanvas.height);\r\n    }\r\n\r\n    tempCtx.drawImage(canvas, 0, 0);\r\n    const dataURL = tempCanvas.toDataURL('image/png');\r\n    let file = dataURLtoFile(dataURL, 'drawing.png');  // Data URL을 파일로 변환\r\n    try {\r\n      const formData = new FormData();\r\n      formData.append('file', file);\r\n  \r\n      await fetch('http://localhost:8081/files/upload', {  // 업로드할 서버 API\r\n        method: 'POST',\r\n        body: formData,\r\n      });\r\n  \r\n      alert(\"이미지가 서버에 저장되었습니다!\");\r\n    } catch (error) {\r\n      console.error('이미지 업로드 실패:', error);\r\n      alert(\"이미지 업로드 실패!\");\r\n    }\r\n\r\n    const link = document.createElement('a');\r\n    link.href = dataURL;\r\n    link.download = `${fileName || 'my_drawing'}.png`;\r\n    link.click();\r\n  };\r\n  const dataURLtoFile = (dataURL, filename) => {\r\n    let arr = dataURL.split(','),  // ',' 기준으로 문자열 분리\r\n        mime = arr[0].match(/:(.*?);/)[1],  // MIME 타입 추출\r\n        bstr = atob(arr[1]),  // Base64 문자열을 디코딩\r\n        n = bstr.length,\r\n        u8arr = new Uint8Array(n);  // Uint8Array로 변환\r\n  \r\n    while(n--) {\r\n      u8arr[n] = bstr.charCodeAt(n);\r\n    }\r\n  \r\n    // 반환할 파일 객체 생성\r\n    return new File([u8arr], filename, {type: mime});\r\n  };\r\n  return (\r\n    <div className=\"canvas-container\">\r\n      <canvas\r\n        ref={canvasRef}\r\n        width={1000}  // 캔버스의 실제 크기\r\n        height={500}  // 캔버스의 실제 크기\r\n        style={{ width: '1000px', height: '500px' }}  // 화면에 표시되는 크기\r\n        onMouseDown={startDrawing}\r\n        onMouseMove={draw}\r\n        onMouseUp={stopDrawing}\r\n        onMouseOut={stopDrawing}\r\n        />\r\n      <div className=\"toolbar\">\r\n        <div className=\"toolbar-left\">\r\n          {/* 색상 선택 */}\r\n          <input type=\"color\" value={color} onChange={(e) => changeColor(e.target.value)} />\r\n\r\n          {/* 그리기 & 지우개 버튼 */}\r\n          <button onClick={enableDrawing} disabled={isErasing}>✏️ 그리기</button>\r\n          <button onClick={enableEraser} disabled={!isErasing}>🧼 지우개</button>\r\n\r\n\r\n          {/* 초기화 버튼 (전체 지우기) */}\r\n          <button onClick={clearCanvas}>🗑️ 초기화</button>\r\n        </div>\r\n        \r\n        <div className=\"toolbar-right\">\r\n          {/* 배경 선택 */}\r\n          <label>\r\n            <input\r\n              type=\"checkbox\"\r\n              checked={isWhiteBackground}\r\n              onChange={(e) => setIsWhiteBackground(e.target.checked)}\r\n            />\r\n            배경을 흰색으로 저장\r\n          </label>\r\n\r\n          {/* 파일명 입력 */}\r\n          <input\r\n            type=\"text\"\r\n            value={fileName}\r\n            onChange={(e) => setFileName(e.target.value)}\r\n            placeholder=\"파일명을 입력하세요\"\r\n          />\r\n\r\n          {/* 저장 버튼 */}\r\n          <button onClick={saveImage}>저장</button>\r\n        </div>\r\n        \r\n        <div className=\"toolbar-line-width\">\r\n          {/* 선 굵기 조절 (세로 방향) */}\r\n          <input\r\n            type=\"range\"\r\n            min=\"1\"\r\n            max=\"20\"\r\n            value={lineWidth}\r\n            onChange={(e) => changeLineWidth(e.target.value)}\r\n            className=\"vertical-slider\"\r\n          />\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Canvas;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}