{"ast":null,"code":"var _jsxFileName = \"D:\\\\ex2.5\\\\03.14\\\\letsgit\\\\\\uD504\\uB860\\uD2B8\\uC5D4\\uB4DC\\\\src\\\\utils\\\\TagManager\\\\TagManager.jsx\",\n  _s = $RefreshSig$();\n// TagManager.jsx\nimport React, { useReducer, useState } from \"react\";\nimport { TextInputUI, Tag } from \"../../components\";\nimport styled from \"styled-components\";\n\n// 태그 추가/삭제를 위한 Reducer 함수\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst tagReducer = (state, action) => {\n  switch (action.type) {\n    case \"ADD_TAG\":\n      return [...state, action.payload];\n    case \"REMOVE_TAG\":\n      return state.filter(tag => tag !== action.payload);\n    default:\n      return state;\n  }\n};\nconst TagListContainer = styled.div`\n  width: 100%;\n  max-width: 412px;\n  min-width: 412px;\n  display: flex;\n  flex-wrap: wrap;\n  margin-top: 10px;\n`;\n_c = TagListContainer;\nconst TagManager = ({\n  placeholder = \"태그 입력\",\n  onTagsUpdate\n}) => {\n  _s();\n  // 태그 목록 관리 (내부 state)\n  const [tags, dispatch] = useReducer(tagReducer, []);\n  // 입력 필드 상태\n  const [tagInput, setTagInput] = useState(\"\");\n  // 한글 입력 상태 (IME)\n  const [isComposing, setIsComposing] = useState(false);\n\n  // 태그 추가 시 부모에 업데이트된 태그 배열 전달\n  const handleAddTag = trimmed => {\n    const updatedTags = [...tags, trimmed];\n    dispatch({\n      type: \"ADD_TAG\",\n      payload: trimmed\n    });\n    if (onTagsUpdate) onTagsUpdate(updatedTags);\n  };\n  const handleTagChange = e => {\n    let newValue = e.target.value;\n    if (!isComposing && newValue.length > 20) {\n      newValue = newValue.substring(0, 20);\n    }\n    setTagInput(newValue);\n  };\n  const handleTagEnter = text => {\n    const trimmed = text.trim();\n    if (trimmed !== \"\") {\n      handleAddTag(trimmed);\n      setTagInput(\"\");\n    }\n  };\n  const handleTagCompositionStart = () => setIsComposing(true);\n  const handleTagCompositionEnd = e => {\n    setIsComposing(false);\n    let newValue = e.target.value;\n    if (newValue.length > 20) {\n      newValue = newValue.substring(0, 20);\n    }\n    setTagInput(newValue);\n  };\n  const handleRemoveTag = tagToRemove => {\n    const updatedTags = tags.filter(tag => tag !== tagToRemove);\n    dispatch({\n      type: \"REMOVE_TAG\",\n      payload: tagToRemove\n    });\n    if (onTagsUpdate) onTagsUpdate(updatedTags);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(TextInputUI, {\n      value: tagInput,\n      maxLength: 20,\n      onChange: handleTagChange,\n      onEnter: handleTagEnter,\n      onCompositionStart: handleTagCompositionStart,\n      onCompositionEnd: handleTagCompositionEnd,\n      placeholder: placeholder\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 77,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(TagListContainer, {\n      children: tags.map((tag, index) => /*#__PURE__*/_jsxDEV(Tag, {\n        text: tag,\n        onRemove: () => handleRemoveTag(tag)\n      }, index, false, {\n        fileName: _jsxFileName,\n        lineNumber: 88,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 86,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 76,\n    columnNumber: 5\n  }, this);\n};\n_s(TagManager, \"uq8cV0qXJ6a8pxG5g7CVF1aGV4A=\");\n_c2 = TagManager;\nexport default TagManager;\nvar _c, _c2;\n$RefreshReg$(_c, \"TagListContainer\");\n$RefreshReg$(_c2, \"TagManager\");","map":{"version":3,"names":["React","useReducer","useState","TextInputUI","Tag","styled","jsxDEV","_jsxDEV","tagReducer","state","action","type","payload","filter","tag","TagListContainer","div","_c","TagManager","placeholder","onTagsUpdate","_s","tags","dispatch","tagInput","setTagInput","isComposing","setIsComposing","handleAddTag","trimmed","updatedTags","handleTagChange","e","newValue","target","value","length","substring","handleTagEnter","text","trim","handleTagCompositionStart","handleTagCompositionEnd","handleRemoveTag","tagToRemove","children","maxLength","onChange","onEnter","onCompositionStart","onCompositionEnd","fileName","_jsxFileName","lineNumber","columnNumber","map","index","onRemove","_c2","$RefreshReg$"],"sources":["D:/ex2.5/03.14/letsgit/프론트엔드/src/utils/TagManager/TagManager.jsx"],"sourcesContent":["// TagManager.jsx\r\nimport React, { useReducer, useState } from \"react\";\r\nimport { TextInputUI, Tag } from \"../../components\";\r\nimport styled from \"styled-components\";\r\n\r\n// 태그 추가/삭제를 위한 Reducer 함수\r\nconst tagReducer = (state, action) => {\r\n  switch (action.type) {\r\n    case \"ADD_TAG\":\r\n      return [...state, action.payload];\r\n    case \"REMOVE_TAG\":\r\n      return state.filter((tag) => tag !== action.payload);\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n\r\nconst TagListContainer = styled.div`\r\n  width: 100%;\r\n  max-width: 412px;\r\n  min-width: 412px;\r\n  display: flex;\r\n  flex-wrap: wrap;\r\n  margin-top: 10px;\r\n`;\r\n\r\nconst TagManager = ({ placeholder = \"태그 입력\", onTagsUpdate }) => {\r\n  // 태그 목록 관리 (내부 state)\r\n  const [tags, dispatch] = useReducer(tagReducer, []);\r\n  // 입력 필드 상태\r\n  const [tagInput, setTagInput] = useState(\"\");\r\n  // 한글 입력 상태 (IME)\r\n  const [isComposing, setIsComposing] = useState(false);\r\n\r\n  // 태그 추가 시 부모에 업데이트된 태그 배열 전달\r\n  const handleAddTag = (trimmed) => {\r\n    const updatedTags = [...tags, trimmed];\r\n    dispatch({ type: \"ADD_TAG\", payload: trimmed });\r\n    if (onTagsUpdate) onTagsUpdate(updatedTags);\r\n  };\r\n\r\n  const handleTagChange = (e) => {\r\n    let newValue = e.target.value;\r\n    if (!isComposing && newValue.length > 20) {\r\n      newValue = newValue.substring(0, 20);\r\n    }\r\n    setTagInput(newValue);\r\n  };\r\n\r\n  const handleTagEnter = (text) => {\r\n    const trimmed = text.trim();\r\n    if (trimmed !== \"\") {\r\n      handleAddTag(trimmed);\r\n      setTagInput(\"\");\r\n    }\r\n  };\r\n\r\n  const handleTagCompositionStart = () => setIsComposing(true);\r\n\r\n  const handleTagCompositionEnd = (e) => {\r\n    setIsComposing(false);\r\n    let newValue = e.target.value;\r\n    if (newValue.length > 20) {\r\n      newValue = newValue.substring(0, 20);\r\n    }\r\n    setTagInput(newValue);\r\n  };\r\n\r\n  const handleRemoveTag = (tagToRemove) => {\r\n    const updatedTags = tags.filter((tag) => tag !== tagToRemove);\r\n    dispatch({ type: \"REMOVE_TAG\", payload: tagToRemove });\r\n    if (onTagsUpdate) onTagsUpdate(updatedTags);\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <TextInputUI\r\n        value={tagInput}\r\n        maxLength={20}\r\n        onChange={handleTagChange}\r\n        onEnter={handleTagEnter}\r\n        onCompositionStart={handleTagCompositionStart}\r\n        onCompositionEnd={handleTagCompositionEnd}\r\n        placeholder={placeholder}\r\n      />\r\n      <TagListContainer>\r\n        {tags.map((tag, index) => (\r\n          <Tag key={index} text={tag} onRemove={() => handleRemoveTag(tag)} />\r\n        ))}\r\n      </TagListContainer>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default TagManager;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}