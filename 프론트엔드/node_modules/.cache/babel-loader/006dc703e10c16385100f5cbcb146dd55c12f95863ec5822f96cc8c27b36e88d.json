{"ast":null,"code":"var _jsxFileName = \"D:\\\\ex2.5\\\\03.14\\\\letsgit\\\\\\uD504\\uB860\\uD2B8\\uC5D4\\uB4DC\\\\src\\\\components\\\\ColorPicker\\\\ColorPicker.jsx\",\n  _s = $RefreshSig$();\nimport React, { useState } from \"react\";\nimport { SketchPicker } from \"react-color\";\nimport \"./ColorPicker.css\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst ColorPicker = ({\n  initialColor = \"#ff0000\",\n  onColorChange\n}) => {\n  _s();\n  const [color, setColor] = useState(initialColor);\n  const [showPicker, setShowPicker] = useState(false);\n  const handleChangeComplete = colorResult => {\n    setColor(colorResult.hex);\n    if (onColorChange) {\n      onColorChange(colorResult.hex);\n    }\n  };\n\n  // 밝기에 따라 글자색 결정\n  const buttonTextColor = parseInt(color.replace(\"#\", \"\"), 16) > 0xffffff / 2 ? \"#000\" : \"#fff\";\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"color-picker-container\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        marginBottom: \"8px\"\n      },\n      children: /*#__PURE__*/_jsxDEV(\"button\", {\n        style: {\n          backgroundColor: color,\n          color: buttonTextColor,\n          padding: \"6px 10px\",\n          border: \"none\",\n          borderRadius: \"4px\",\n          cursor: \"pointer\"\n        },\n        onClick: () => setShowPicker(!showPicker),\n        children: showPicker ? \"닫기\" : \"색깔 선택\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 24,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 22,\n      columnNumber: 7\n    }, this), showPicker && /*#__PURE__*/_jsxDEV(SketchPicker, {\n      color: color,\n      width: 150 // 원하는 너비(px 단위)\n      ,\n      onChangeComplete: handleChangeComplete\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 41,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 21,\n    columnNumber: 5\n  }, this);\n};\n_s(ColorPicker, \"N5lje97i1Ny+xytOQpvLZIiy9bk=\");\n_c = ColorPicker;\nexport default ColorPicker;\nvar _c;\n$RefreshReg$(_c, \"ColorPicker\");","map":{"version":3,"names":["React","useState","SketchPicker","jsxDEV","_jsxDEV","ColorPicker","initialColor","onColorChange","_s","color","setColor","showPicker","setShowPicker","handleChangeComplete","colorResult","hex","buttonTextColor","parseInt","replace","className","children","style","marginBottom","backgroundColor","padding","border","borderRadius","cursor","onClick","fileName","_jsxFileName","lineNumber","columnNumber","width","onChangeComplete","_c","$RefreshReg$"],"sources":["D:/ex2.5/03.14/letsgit/프론트엔드/src/components/ColorPicker/ColorPicker.jsx"],"sourcesContent":["import React, { useState } from \"react\";\r\nimport { SketchPicker } from \"react-color\";\r\nimport \"./ColorPicker.css\";\r\n\r\nconst ColorPicker = ({ initialColor = \"#ff0000\", onColorChange }) => {\r\n  const [color, setColor] = useState(initialColor);\r\n  const [showPicker, setShowPicker] = useState(false);\r\n\r\n  const handleChangeComplete = (colorResult) => {\r\n    setColor(colorResult.hex);\r\n    if (onColorChange) {\r\n      onColorChange(colorResult.hex);\r\n    }\r\n  };\r\n\r\n  // 밝기에 따라 글자색 결정\r\n  const buttonTextColor =\r\n    parseInt(color.replace(\"#\", \"\"), 16) > 0xffffff / 2 ? \"#000\" : \"#fff\";\r\n\r\n  return (\r\n    <div className=\"color-picker-container\">\r\n      <div style={{ marginBottom: \"8px\" }}>\r\n        {/* 컬러 피커 열기/닫기 버튼 */}\r\n        <button\r\n          style={{\r\n            backgroundColor: color,\r\n            color: buttonTextColor,\r\n            padding: \"6px 10px\",\r\n            border: \"none\",\r\n            borderRadius: \"4px\",\r\n            cursor: \"pointer\",\r\n          }}\r\n          onClick={() => setShowPicker(!showPicker)}\r\n        >\r\n          {showPicker ? \"닫기\" : \"색깔 선택\"}\r\n        </button>\r\n      </div>\r\n\r\n      {/* showPicker가 true일 때만 SketchPicker 표시 */}\r\n      {showPicker && (\r\n        <SketchPicker\r\n          color={color}\r\n          width={150}                 // 원하는 너비(px 단위)\r\n          onChangeComplete={handleChangeComplete}\r\n        />\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default ColorPicker;\r\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,QAAQ,OAAO;AACvC,SAASC,YAAY,QAAQ,aAAa;AAC1C,OAAO,mBAAmB;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAE3B,MAAMC,WAAW,GAAGA,CAAC;EAAEC,YAAY,GAAG,SAAS;EAAEC;AAAc,CAAC,KAAK;EAAAC,EAAA;EACnE,MAAM,CAACC,KAAK,EAAEC,QAAQ,CAAC,GAAGT,QAAQ,CAACK,YAAY,CAAC;EAChD,MAAM,CAACK,UAAU,EAAEC,aAAa,CAAC,GAAGX,QAAQ,CAAC,KAAK,CAAC;EAEnD,MAAMY,oBAAoB,GAAIC,WAAW,IAAK;IAC5CJ,QAAQ,CAACI,WAAW,CAACC,GAAG,CAAC;IACzB,IAAIR,aAAa,EAAE;MACjBA,aAAa,CAACO,WAAW,CAACC,GAAG,CAAC;IAChC;EACF,CAAC;;EAED;EACA,MAAMC,eAAe,GACnBC,QAAQ,CAACR,KAAK,CAACS,OAAO,CAAC,GAAG,EAAE,EAAE,CAAC,EAAE,EAAE,CAAC,GAAG,QAAQ,GAAG,CAAC,GAAG,MAAM,GAAG,MAAM;EAEvE,oBACEd,OAAA;IAAKe,SAAS,EAAC,wBAAwB;IAAAC,QAAA,gBACrChB,OAAA;MAAKiB,KAAK,EAAE;QAAEC,YAAY,EAAE;MAAM,CAAE;MAAAF,QAAA,eAElChB,OAAA;QACEiB,KAAK,EAAE;UACLE,eAAe,EAAEd,KAAK;UACtBA,KAAK,EAAEO,eAAe;UACtBQ,OAAO,EAAE,UAAU;UACnBC,MAAM,EAAE,MAAM;UACdC,YAAY,EAAE,KAAK;UACnBC,MAAM,EAAE;QACV,CAAE;QACFC,OAAO,EAAEA,CAAA,KAAMhB,aAAa,CAAC,CAACD,UAAU,CAAE;QAAAS,QAAA,EAEzCT,UAAU,GAAG,IAAI,GAAG;MAAO;QAAAkB,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACtB;IAAC;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACN,CAAC,EAGLrB,UAAU,iBACTP,OAAA,CAACF,YAAY;MACXO,KAAK,EAAEA,KAAM;MACbwB,KAAK,EAAE,GAAI,CAAiB;MAAA;MAC5BC,gBAAgB,EAAErB;IAAqB;MAAAgB,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACxC,CACF;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACE,CAAC;AAEV,CAAC;AAACxB,EAAA,CA5CIH,WAAW;AAAA8B,EAAA,GAAX9B,WAAW;AA8CjB,eAAeA,WAAW;AAAC,IAAA8B,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}