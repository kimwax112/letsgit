<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
  PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
  "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="com.example.Loginpj.mapper.RequestMapper">

  <resultMap id="RequestResultMap" type="com.example.Loginpj.model.Request">
    <id property="requestId" column="request_id" />
    <result property="title" column="title" />
    <result property="categoryTags" column="category_tags" />
    <result property="style" column="style" />
    <result property="amount" column="amount" />
    <result property="deadline" column="deadline" />
    <result property="description" column="description" />
    <result property="image1Url" column="image1_url" />
    <result property="image2Url" column="image2_url" />
    <result property="image3Url" column="image3_url" />
    <result property="username" column="username" />
    <result property="requesterName" column="name" />
  </resultMap>

  <!-- 기존 쿼리들 유지 -->
  <select id="findAll" resultMap="RequestResultMap">
    SELECT r.request_id, r.title, r.category_tags, r.style, r.amount, r.deadline, r.description,
           r.image1_url, r.image2_url, r.image3_url, r.username, u.name
      FROM request r
      LEFT JOIN user_info u ON r.username = u.username
     ORDER BY r.request_id
  </select>

  <!-- description만 업데이트하는 새로운 쿼리 -->
  <update id="updateDescription" parameterType="map">
    UPDATE request
    SET description = #{description, jdbcType=VARCHAR}
    WHERE request_id = #{requestId, jdbcType=NUMERIC}
  </update>

  <!-- 나머지 기존 쿼리들 유지 -->
  <select id="findById" parameterType="long" resultMap="RequestResultMap">
    SELECT r.request_id, r.title, r.category_tags, r.style, r.amount, r.deadline, r.description,
           r.image1_url, r.image2_url, r.image3_url, r.username, u.name
      FROM request r
      LEFT JOIN user_info u ON r.username = u.username
     WHERE r.request_id = #{requestId}
  </select>

  <insert id="insert" parameterType="com.example.Loginpj.model.Request" useGeneratedKeys="false">
    INSERT INTO request (
      request_id, title, category_tags, style, amount, deadline, description, image1_url, image2_url, image3_url, username
    )
    VALUES (
      request_seq.nextval, #{title, jdbcType=VARCHAR}, #{categoryTags, jdbcType=VARCHAR}, #{style, jdbcType=VARCHAR},
      #{amount, jdbcType=NUMERIC}, #{deadline, jdbcType=TIMESTAMP}, #{description, jdbcType=VARCHAR},
      #{image1Url, jdbcType=VARCHAR}, #{image2Url, jdbcType=VARCHAR}, #{image3Url, jdbcType=VARCHAR},
      #{username, jdbcType=VARCHAR}
    )
  </insert>

  <update id="update" parameterType="com.example.Loginpj.model.Request">
    UPDATE request
    SET
      title = #{title, jdbcType=VARCHAR},
      category_tags = #{categoryTags, jdbcType=VARCHAR},
      style = #{style, jdbcType=VARCHAR},
      amount = #{amount, jdbcType=NUMERIC},
      deadline = #{deadline, jdbcType=TIMESTAMP},
      description = #{description, jdbcType=VARCHAR},
      image1_url = #{image1Url, jdbcType=VARCHAR},
      image2_url = #{image2Url, jdbcType=VARCHAR},
      image3_url = #{image3Url, jdbcType=VARCHAR}
    WHERE request_id = #{requestId, jdbcType=NUMERIC}
  </update>

  <delete id="deleteById" parameterType="long">
    DELETE FROM request WHERE request_id = #{requestId}
  </delete>

  <select id="findByUsername" parameterType="string" resultMap="RequestResultMap">
    SELECT r.request_id, r.title, r.category_tags, r.style, r.amount, r.deadline, r.description,
           r.image1_url, r.image2_url, r.image3_url, r.username, u.name
      FROM request r
      LEFT JOIN user_info u ON r.username = u.username
     WHERE r.username = #{username}
     ORDER BY r.request_id DESC
  </select>
</mapper>